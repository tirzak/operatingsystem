#include "gdt.h"

GlobalDescriptorTable gdtW, *gdtptrs;

gdtptrs = &gdtW;


gdtptrs->nullSegmentSelector = {0,0,0}, gdtptrs->unusedSegmentSelctor = {0,0,0}
, gdtptrs->codeSegmentSelector={0,64*1024*1024,0x9A}, gdtptrs->dataSegmentSelector= {0,64*1024*1024,0x92}
gdt_entry_t *dSSpointer, *cSSPointer;
cSSPointer = gdtptrs->codeSegmentSelector;
dSSpointer =gdtptrs->dataSegmentSelector;
void init_gdt(){


uint32_t i[2];


i[0] = (uint32_t)gdtptrs;
i[1] = (uint32_t)sizeof(struct gdtW);

asm volatile("lgdt (%0)": :"p" (((uint8_t *) i)+2));


}


uint16_t DataSegmentSelector(){
  return (uint8_t)dSSpointer - (uint8_t)gdtptrs;
}
uint16_t CodeSegmentSelector(){
  return (uint8_t)cSSPointer - (uint8_t)gdtptrs;
}

void SegmentSelector(uint32_t base, uint32_t limit, uint8_t flags)
{
  uint8_t* target = (uint8_t*)gdtptrs;

  if(limit <= 65536){
    target[6] = 0x40;
  }
  else{

    if((imit & 0xFFF ) !=0xFFF)
      limit = (limit >> 12)-1;
    else
        limit = limit >> 12;

    target[6] = 0xC0;


  }

  target[0] = limit & 0xFF;
  target[1] = (limit >> 8) & 0xFF;
  target[6] |= (limit >> 16) & 0xF;
  

}
